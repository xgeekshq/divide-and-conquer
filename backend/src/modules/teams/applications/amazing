import { TeamFactory } from 'src/libs/test-utils/mocks/factories/team-factory.mock';
import Team from 'src/modules/teams/entities/team.schema';
import { Test, TestingModule } from '@nestjs/testing';
import { DeepMocked, createMock } from '@golevelup/ts-jest';
import { getTeamsUserIsNotMemberUseCase } from 'src/modules/teams/providers';
import * as TeamUsers from 'src/modules/teamUsers/interfaces/types';
import * as Boards from 'src/modules/boards/interfaces/types';
import { BadRequestException } from '@nestjs/common';
import { TeamRepositoryInterface } from '../interfaces/repositories/team.repository.interface';
import { TEAM_REPOSITORY } from 'src/modules/teams/constants';
import { UseCase } from 'src/libs/interfaces/use-case.interface';
import { DeleteTeamUserServiceInterface } from 'src/modules/teamUsers/interfaces/services/delete.team.user.service.interface';
import { DeleteBoardServiceInterface } from 'src/modules/boards/interfaces/services/delete.board.service.interface';
import { User } from '@slack/web-api/dist/response/AdminAppsRequestsListResponse';
import { TeamUserFactory } from 'src/libs/test-utils/mocks/factories/teamUser-factory.mock';
import { UserFactory } from 'src/libs/test-utils/mocks/factories/user-factory';
import TeamUser from 'src/modules/teamUsers/entities/team.user.schema';
import { GetTeamsUserIsNotMemberUseCase } from './get-teams-user-is-not-member.use-case';
import { GetBoardServiceInterface } from 'src/modules/boards/interfaces/services/get.board.service.interface';
import { GetTeamUserServiceInterface } from 'src/modules/teamUsers/interfaces/services/get.team.user.service.interface';
import faker from '@faker-js/faker';

const teams: Team[] = TeamFactory.createMany(4);
const teamUsers: TeamUser[] = TeamUserFactory.createMany(5);
const users: User[] = UserFactory.createMany(5);
const usersWithId = users.map((user, idx) => ({
	_id: teamUsers[idx]._id,
	...user
}));
const teamUsersWithUsers = teamUsers.map((teamUser, idx) => ({
	...teamUser,
	user: usersWithId[idx]
}));
const team1 = {
	...teams[0],
	users: teamUsersWithUsers
};
const team2 = {
	...teams[1],
	users: teamUsersWithUsers
};
const teamsWithUsers = [team1, team2];

describe('GetTeamsUserIsNotMemberUseCase', () => {
	let getTeamsUserIsNotMember: UseCase<string, Team[]>;
	let teamRepositoryMock: DeepMocked<TeamRepositoryInterface>;
	let getTeamUserServiceMock: DeepMocked<GetTeamUserServiceInterface>;
	let getBoardServiceMock: DeepMocked<GetBoardServiceInterface>;

	beforeAll(async () => {
		const module: TestingModule = await Test.createTestingModule({
			providers: [
				getTeamsUserIsNotMemberUseCase,
				{
					provide: TEAM_REPOSITORY,
					useValue: createMock<TeamRepositoryInterface>()
				},
				{
					provide: TeamUsers.TYPES.services.GetTeamUserService,
					useValue: createMock<GetTeamUserServiceInterface>()
				},
				{
					provide: Boards.TYPES.services.GetBoardService,
					useValue: createMock<GetBoardServiceInterface>()
				}
			]
		}).compile();

		getTeamsUserIsNotMember = module.get<UseCase<string, Team[]>>(
			getTeamsUserIsNotMemberUseCase.provide
		);
		teamRepositoryMock = module.get(TEAM_REPOSITORY);
		getTeamUserServiceMock = module.get(TeamUsers.TYPES.services.GetTeamUserService);
		getBoardServiceMock = module.get(Boards.TYPES.services.GetBoardService);
	});

	beforeEach(() => {
		jest.restoreAllMocks();
		jest.clearAllMocks();

		// teamRepositoryMock.findOneAndRemoveByField.mockResolvedValue(team1);
		// deleteTeamUserServiceMock.deleteTeamUsersOfTeam.mockResolvedValue(true);
		// deleteBoardServiceMock.deleteBoardsByTeamId.mockResolvedValue(true);
	});

	it('should be defined', () => {
		expect(getTeamsUserIsNotMember).toBeDefined();
	});

	describe('execute', () => {
		it('should return an array of objects with team.name and team._id where user is not team member', async () => {
			getTeamUserServiceMock.getAllTeamsOfUser.mockResolvedValue([]);

			const userId = faker.datatype.uuid();

			const expectedResult = teamsWithUsers.map(({ _id, name }) => ({
				_id,
				name
			}));
			const result = await teamService.getTeamsUserIsNotMember(userId);

			expect(result).toEqual(expectedResult);
			expect(teamRepositoryMock.getAllTeams).toHaveBeenCalled();
			expect(getTeamUserServiceMock.getAllTeamsOfUser).toHaveBeenCalled();
		});
	});
});
