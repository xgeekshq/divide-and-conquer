version: "3.9"

services:
  backend:
    build:
      context: backend
      dockerfile: docker/prod/Dockerfile

    # set image name
    image: split-backend

    # set container name
    container_name: backend

    ports:
      - 3200:3200

    env_file:
      - ./backend/.env

    restart: unless-stopped
    networks:
      - split-network
    depends_on:
      - mongo
  frontend:
    build:
      context: frontend
      dockerfile: docker/prod/Dockerfile
      args:
        - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL:-http://localhost:3200}
        - NEXT_PUBLIC_NEXTAUTH_URL=${NEXT_PUBLIC_NEXTAUTH_URL:-http://localhost:3000}
        - NEXT_PUBLIC_ENABLE_AZURE=${NEXT_PUBLIC_ENABLE_AZURE}

    # set image name
    image: split-frontend

    # set container name
    container_name: frontend

    ports:
      - 3000:3000

    env_file:
      - ./frontend/.env

    restart: unless-stopped
    networks:
      - split-network
    depends_on:
      - backend
  mongo2:
    image: mongo
    restart: always
    container_name: mongo2
    networks:
      - split-network
    ports:
      - "27018:27017"
    entrypoint: "bash -c '/usr/bin/mongod --replSet $${MONGO_REPLICA_NAME} --journal --bind_ip_all'"

    env_file:
      - ./database/.env

  mongo:
    image: mongo
    restart: always
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - ./database/rs-init.sh:/scripts/rs-init.sh
    networks:
      - split-network
    links:
      - mongo2
    command: "bash -c '/usr/bin/mongod --replSet $${MONGO_REPLICA_NAME} --journal --bind_ip_all'"

    env_file:
      - ./database/.env
  
  redis:
    container_name: redis
    image: redis
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"     
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - '6379:6379'
    env_file:
      - ./database/redis/.env
networks:
  split-network:
    driver: bridge
